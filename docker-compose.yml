version: '3'
services:
  db:
    restart: always
    volumes:
      - ./database/mysql:/var/lib/mysql
      - ./database/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf
    image: mysql:5.7
    ports:
       - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 'Waves6_'
      MYSQL_DATABASE: 'logistica'
      MYSQL_USER: 'tcero'
      MYSQL_PASSWORD: 'Waves6_'
    networks:
      - backend  
  backend:
    restart: always
    volumes:
      - ./backend/target:/target
    image: openjdk:8-jdk
    # build:
    #   context: backend # Use an image built from the specified dockerfile in the `polling-app-server` directory.
    #   dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
      - "5005:5005"
    command: java -Dlogging.config='/target/classes/log4j2.xml' -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -cp /target/classes:/target/dependency/META-INF/*:/target/dependency/BOOT-INF/lib/* com.logistica.demo.LogisticaBackApplication 
    depends_on: 
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service 
      TZ: America/Santiago
      DATABASE: logistica  
      HOST: db
      PASS: Waves6_
      PORT: '3306'
      USER: tcero
      PROTOCOL: mysql
      DRIVER: com.mysql.jdbc.Driver
      TEST: 'false'
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend
  frontend:
    restart: always
    image: node:12.4.0
    volumes:
      - ./frontend/:/app
    working_dir: /app
    command: npm start
    # ports:
    #   - "3000:3000"
    depends_on:
      - backend
    networks:
      - frontend
  ingress:
    restart: always
    image: nginx:1.17
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - frontend
    networks:
      - backend
      - frontend
  prometheus:
    restart: always
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend
  grafana:
    restart: always
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - backend
networks:
  backend:
  frontend:    